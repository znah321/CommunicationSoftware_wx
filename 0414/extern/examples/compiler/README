
This readme is intended for the MATLAB Compiler 6.0.

Copyright 1997-2014 The MathWorks, Inc.
  

                               README

The files in this directory fall into two categories:

   * Example source code files; some are written as M-files 
   * Files to help you build and configure the source code files into 
     stand-alone external applications.

The "MATLAB Compiler User's Guide" details most of the files in this
directory.  


                   *******************************
                      EXAMPLE SOURCE CODE FILES
                   *******************************

The Makefile (Makefile.nmake) found in this directory can be used to 
build the examples.  The user needs to modify the MATLABROOT
environment variable found in the makefiles to indicate the appropriate
location of the root directory of MATLAB.

You can use the following commands to build and test the examples:

On Windows:
-----------
1. To build and test all the examples in one step:
         nmake /f Makefile.nmake MATLABROOT=<matlabroot> bnt_exes 
2. To only build the examples:
         nmake /f Makefile.nmake MATLABROOT=<matlabroot> build_all
3. To clean the targets:
         nmake /f Makefile.nmake clean


On Unix:
--------
1. To build and test all the examples in one step:
         gmake -f Makefile MATLABROOT=<matlabroot> bnt_exes 
2. To only build the examples:
         gmake -f Makefile MATLABROOT=<matlabroot> build_all
3. To run all the examples built previously:
         gmake -f Makefile MATLABROOT=<matlabroot> exes
4. To clean the targets:
         gmake -f Makefile clean

Note: <matlabroot> is the actual directory (without the trailing "slash"
(backwards or forwards)) where MATLAB is installed.

To build each example individually, you have to provide the name of the
final executable as the target to gmake (nmake on Windows). For various
target names, refer to the Makefile (Makefile.nmake on Windows).


The following section explains each example in brief.

hello.m - A Basic Stand-Alone Application
----------------------------------------
This example shows how to create a basic non-graphics based stand-alone
application. The sample M-file needed for this example is hello.m.
To create the stand-alone application, use:

    mcc -m hello.m

This will create a stand-alone application, hello (hello.exe on Windows).
See "MATLAB Compiler User's Guide" on how to execute the stand-alone on a 
target machine.

magicsquare.m - A Stand-Alone Application that Takes an Input from the User
--------------------------------------------------------------------------
This example shows how to create and run a stand-alone application that
takes user input. The sample M-file needed for this example is 
magicsquare.m. To create the stand-alone application, use:

     mcc -m magicsquare.m

To run this example, execute the following from the shell prompt (DOS prompt
on Windows):

     magicsquare 4


flames.m and flames.mat Graphics Example with a MAT-File
--------------------------------------------------------

The "MATLAB Compiler User's Guide" describes an example of creating a 
stand-alone application from a single M-file that uses MATLAB graphics 
and a MAT file. The sample M-file and the MAT-file are:

  * flames.m, which is a function M-file that uses flames.mat.
  * flames.mat, which is a MATLAB data file that contains the data for
    the graphic that is displayed.


Data_Handling/ex_loadsave.m: Data Handling example
-------------------------------------------------------------------------------
This example shows the "load/save" function on data files in deployed mode.
There are three source data files:
    user_data.mat 
    userdata/extra_data.mat 
    ../externdata/extern_data.mat

Compile this example with mcc command: 
    mcc -mvC ex_loadsave.m -a 'user_data.mat' -a
    './userdata/extra_data.mat' -a '../externdata/extern_data.mat'

This creates a stand-alone called ex_loadsave (ex_loadsave.exe on Windows).
When you execute this application, it loads three data files and saves the 
result to "./output/saved_data.mat" file.